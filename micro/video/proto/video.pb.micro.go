// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: video.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for VideoService service

type VideoService interface {
	ChannelAdvert(ctx context.Context, in *RequestChannelAdvert, opts ...client.CallOption) (*ResponseChannelAdvert, error)
	ChannelHotList(ctx context.Context, in *RequestChannelHotList, opts ...client.CallOption) (*ResponseChannelHotList, error)
}

type videoService struct {
	c    client.Client
	name string
}

func NewVideoService(name string, c client.Client) VideoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &videoService{
		c:    c,
		name: name,
	}
}

func (c *videoService) ChannelAdvert(ctx context.Context, in *RequestChannelAdvert, opts ...client.CallOption) (*ResponseChannelAdvert, error) {
	req := c.c.NewRequest(c.name, "VideoService.ChannelAdvert", in)
	out := new(ResponseChannelAdvert)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) ChannelHotList(ctx context.Context, in *RequestChannelHotList, opts ...client.CallOption) (*ResponseChannelHotList, error) {
	req := c.c.NewRequest(c.name, "VideoService.ChannelHotList", in)
	out := new(ResponseChannelHotList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoService service

type VideoServiceHandler interface {
	ChannelAdvert(context.Context, *RequestChannelAdvert, *ResponseChannelAdvert) error
	ChannelHotList(context.Context, *RequestChannelHotList, *ResponseChannelHotList) error
}

func RegisterVideoServiceHandler(s server.Server, hdlr VideoServiceHandler, opts ...server.HandlerOption) error {
	type videoService interface {
		ChannelAdvert(ctx context.Context, in *RequestChannelAdvert, out *ResponseChannelAdvert) error
		ChannelHotList(ctx context.Context, in *RequestChannelHotList, out *ResponseChannelHotList) error
	}
	type VideoService struct {
		videoService
	}
	h := &videoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VideoService{h}, opts...))
}

type videoServiceHandler struct {
	VideoServiceHandler
}

func (h *videoServiceHandler) ChannelAdvert(ctx context.Context, in *RequestChannelAdvert, out *ResponseChannelAdvert) error {
	return h.VideoServiceHandler.ChannelAdvert(ctx, in, out)
}

func (h *videoServiceHandler) ChannelHotList(ctx context.Context, in *RequestChannelHotList, out *ResponseChannelHotList) error {
	return h.VideoServiceHandler.ChannelHotList(ctx, in, out)
}
